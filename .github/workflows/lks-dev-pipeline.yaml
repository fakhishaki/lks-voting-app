name: lks-dev-pipel

on:
  push:
    branches:
      - "dev"
    paths:
      - .github/workflows/lks-dev-pipeline.yaml

env:
  AWS_REGION: us-east-1                 
  ECR_REPOSITORY: lks-voting-image
  ENV: "dev"

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Image Development
    runs-on:
      - self-hosted
      - linux
      - master
    environment: Development
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Copy docker config to root
      run: |
        sudo mkdir -p /root/.docker
        sudo cp ~/.docker/config.json /root/.docker/config.json


    - name: Build, tag, and push image vote to Amazon ECR
      id: build-image-vote
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        VOTE_IMAGE_TAG: vote-dev-latest
      run: |
        sudo docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VOTE_IMAGE_TAG --build-arg aws_region=${{ env.AWS_REGION }} --build-arg copy_or_mount="copy" -f worker/Dockerfile ./worker
        sudo docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VOTE_IMAGE_TAG
        sudo echo "::set-output name=worker_image::$ECR_REGISTRY/$ECR_REPOSITORY:$VOTE_IMAGE_TAG"

    - name: Build, tag, and push image result to Amazon ECR
      id: build-image-result
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        RESULT_IMAGE_TAG: result-dev-latest
      run: |
        sudo docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$RESULT_IMAGE_TAG --build-arg aws_region=${{ env.AWS_REGION }} --build-arg copy_or_mount="copy" -f worker/Dockerfile ./worker
        sudo docker push $ECR_REGISTRY/$ECR_REPOSITORY:$RESULT_IMAGE_TAG
        echo "::set-output name=worker_image::$ECR_REGISTRY/$ECR_REPOSITORY:$RESULT_IMAGE_TAG"

    - name: Build, tag, and push image worker to Amazon ECR
      id: build-image-worker
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        WORKER_IMAGE_TAG: worker-dev-latest
      run: |
        sudo docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG --build-arg aws_region=${{ env.AWS_REGION }} --build-arg copy_or_mount="copy" -f worker/Dockerfile ./worker
        sudo docker push $ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG
        sudo echo "::set-output name=worker_image::$ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG"

  master:
    name: Pull Image on master
    runs-on: master
    needs: build
    steps:
      - name: Update runner's docker Version, as worker module requires it
        run: |
          docker --version

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Copy docker config to root
        run: |
          sudo mkdir -p /root/.docker
          sudo cp ~/.docker/config.json /root/.docker/config.json
  
      - name: Pull image
        id: pull-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: lks-voting-image
          VOTE_IMAGE_TAG: vote-dev-latest
          RESULT_IMAGE_TAG: result-dev-latest
          WORKER_IMAGE_TAG: worker-dev-latest

        # Build docker images for vote module and push it to ECR so that it can be deployed to EKS
        run: |
          sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$VOTE_IMAGE_TAG
          sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$RESULT_IMAGE_TAG
          sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG

  deploy:  
    name: Deploy Application into docker swarm
    runs-on: master
    needs: master
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy application images to Docker Swarm
        run: |
          sudo docker node ls
          sudo docker service ls
          sudo docker stack ls
          sudo docker stack rm stackdemo
          sudo sleep 30
          sudo docker stack deploy --compose-file docker-stack.yml vote

